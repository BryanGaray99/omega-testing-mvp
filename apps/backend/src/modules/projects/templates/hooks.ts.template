import { Before, After, BeforeAll, AfterAll, setDefaultTimeout, Given, Then } from '@cucumber/cucumber';
import { expect } from '@playwright/test';
{{#each imports}}
{{this}}
{{/each}}

// Set default timeout for all steps
setDefaultTimeout(30000);

// Global API clients - will be dynamically added by HooksUpdaterService
{{#each clients}}
export let {{this.clientName}}: {{this.clientType}};
{{/each}}

// Test data storage
export const testData = {
  // Entity storage - will be dynamically added by HooksUpdaterService
  {{#each entities}}
  created{{this.pluralName}}: new Map<string, any>(),
  {{/each}}
  lastResponse: null as any,
  lastError: null as any
};

/**
 * Initialize all API clients before test suite
 */
BeforeAll(async function() {
  console.log('Initializing API clients for BDD tests...');
  
  // Initialize all clients - will be dynamically added by HooksUpdaterService
  {{#each clients}}
  {{this.clientName}} = new {{this.clientType}}();
  {{/each}}

  // Initialize client contexts
  await Promise.all([
    {{#each clients}}
    {{this.clientName}}.init(){{#unless @last}},{{/unless}}
    {{/each}}
  ]);

  console.log('All API clients initialized successfully');
});

/**
 * Clean up before each scenario
 */
Before(async function() {
  // Clear test data between scenarios
  testData.lastResponse = null;
  testData.lastError = null;
  
  // Note: We don't clear created entities as they might be needed across scenarios
  // Cleanup will happen in After hook if needed
});

/**
 * Clean up after each scenario
 */
After(async function() {
  // Clean up created test data
  try {
    // Clean up in reverse order to respect dependencies
    {{#each entities}}
    // Delete created {{this.pluralName}}
    for (const [{{this.singularName}}Id] of testData.created{{this.pluralName}}) {
      try {
        await {{this.clientName}}.delete{{this.singularName}}({{this.singularName}}Id);
      } catch (error: any) {
        console.warn(`Failed to delete {{this.singularName}} ${ {{this.singularName}}Id}:`, error.message);
      }
    }
    {{/each}}
    
  } catch (error: any) {
    console.warn('Error during test cleanup:', error.message);
  } finally {
    // Clear all test data
    {{#each entities}}
    testData.created{{this.pluralName}}.clear();
    {{/each}}
  }
});

/**
 * Clean up after all scenarios
 */
AfterAll(async function() {
  console.log('Cleaning up API clients...');
  
  // Dispose all client contexts
  await Promise.all([
    {{#each clients}}
    {{this.clientName}}?.dispose(){{#unless @last}},{{/unless}}
    {{/each}}
  ]);

  console.log('All API clients disposed successfully');
});

/**
 * Helper function to handle API responses and errors
 */
export function handleApiResponse(response: any, error?: any) {
  if (error) {
    testData.lastError = error;
    testData.lastResponse = null;
  } else if (response && response.status >= 400) {
    // Treat 4xx and 5xx status codes as errors
    testData.lastError = {
      status: response.status,
      message: response.data?.message || 'HTTP Error',
      response: response
    };
    testData.lastResponse = null;
  } else {
    testData.lastResponse = response;
    testData.lastError = null;
  }
}

/**
 * Helper function to get the last response
 */
export function getLastResponse() {
  return testData.lastResponse;
}

/**
 * Helper function to get the last error
 */
export function getLastError() {
  return testData.lastError;
}

/**
 * Helper function to store created entity
 */
export function storeCreatedEntity(type: string, id: string, data: any) {
  switch (type) {
    {{#each entities}}
    case '{{this.singularName}}':
      testData.created{{this.pluralName}}.set(id, data);
      break;
    {{/each}}
    default:
      console.warn(`Unknown entity type: ${type}`);
  }
}

/**
 * Helper function to get created entity
 */
export function getCreatedEntity(type: string, id: string) {
  switch (type) {
    {{#each entities}}
    case '{{this.singularName}}':
      return testData.created{{this.pluralName}}.get(id);
    {{/each}}
    default:
      console.warn(`Unknown entity type: ${type}`);
      return null;
  }
}

/**
 * Step definition for API availability check
 */
Given('the API is available', async function() {
  // This step ensures that the API clients are properly initialized
  // The actual initialization happens in BeforeAll hook
  // We can add additional health checks here if needed
  
  // Verify that all clients are initialized
  {{#each clients}}
  if (!{{this.clientName}}) {
    throw new Error('{{this.clientType}} is not properly initialized');
  }
  {{/each}}
  
  // Optional: Add a simple health check to verify API is responding
  try {
    // You could add a simple health check endpoint call here
    // For now, we'll just verify the clients exist
    console.log('API is available and ready for testing');
  } catch (error: any) {
    throw new Error(`API is not available: ${error.message}`);
  }
});

/**
 * Centralized step definition for validation errors
 */
Then('I should receive a validation error', function () {
  const error = getLastError();
  const response = getLastResponse();
  
  if (error) {
    const statusCode = error.status || error.response?.status;
    if (statusCode === 422) {
      console.log('(P) Validation error (422) detected');
      return;
    } else {
      console.log(`(F) Error ${statusCode} received, expected 422`);
      return;
    }
  } else if (response && response.status >= 400) {
    if (response.status === 422) {
      console.log('(P) Validation error (422) detected');
      return;
    } else {
      console.log(`(F) Error ${response.status} received, expected 422`);
      return;
    }
  }
  
  console.log('(F) No validation error detected, expected 422');
  throw new Error('Expected validation error (422) but none was received');
});

/**
 * Centralized step definition for status codes
 */
Then('I should receive a {int} status code', function (statusCode: number) {
  const response = getLastResponse();
  const error = getLastError();
  
  if (error) {
    const actualStatus = error.status || error.response?.status;
    if (actualStatus === statusCode) {
      console.log(`(P) Expected status code ${statusCode} received`);
    } else {
      console.log(`(F) Expected status code ${statusCode}, got ${actualStatus}`);
    }
    expect(actualStatus).toBe(statusCode);
  } else if (response) {
    if (response.status === statusCode) {
      console.log(`(P) Expected status code ${statusCode} received`);
    } else {
      console.log(`(F) Expected status code ${statusCode}, got ${response.status}`);
    }
    expect(response.status).toBe(statusCode);
  } else {
    console.log(`(F) Expected status code ${statusCode} but no response or error was found`);
    throw new Error(`Expected status code ${statusCode} but no response or error was found`);
  }
});

/**
 * Centralized step definition for not found errors
 */
Then('I should receive a not found error', function () {
  const error = getLastError();
  const response = getLastResponse();
  
  if (error) {
    const statusCode = error.status || error.response?.status;
    if (statusCode === 404) {
      console.log('(P) Not found error (404) detected');
      return;
    } else {
      console.log(`(F) Error ${statusCode} received, expected 404`);
      return;
    }
  } else if (response && response.status === 404) {
    console.log('(P) Not found error (404) detected');
    return;
  } else {
    console.log('(F) No not found error detected, expected 404');
    throw new Error('Expected not found error (404) but none was received');
  }
});

/**
 * Scenario result indicators
 */
Before(function (scenario) {
  console.log(`\nüöÄ Starting scenario: ${scenario.pickle.name}`);
});

After(function (scenario) {
  if (scenario.result?.status === 'PASSED') {
    console.log(`\n‚úÖ **************PASSED**************`);
    console.log(`‚úÖ Scenario: ${scenario.pickle.name}`);
    console.log(`‚úÖ ************************************\n`);
  } else {
    console.log(`\n‚ùå **************FAILED**************`);
    console.log(`‚ùå Scenario: ${scenario.pickle.name}`);
    console.log(`‚ùå ************************************\n`);
  }
});
