import { APIRequestContext, request } from '@playwright/test';
import dotenv from 'dotenv';

dotenv.config();

export interface ApiResponse<T = any> {
  status: number;
  data: T;
  headers: Record<string, string>;
  url: string;
}

export interface RequestOptions {
  headers?: Record<string, string>;
  params?: Record<string, string | number>;
  timeout?: number;
}

/**
 * Base API client providing common functionality for all resource clients
 */
export class BaseApiClient {
  protected context: APIRequestContext | null = null;
  protected baseURL: string;
  protected basePath: string;

  constructor() {
    this.baseURL = process.env.API_URL || '{{baseUrl}}';
    this.basePath = process.env.API_BASE_PATH || '{{basePath}}';
  }

  /**
   * Initialize API request context
   */
  async init(): Promise<void> {
    this.context = await request.newContext({
      baseURL: this.baseURL,
      extraHTTPHeaders: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        ...(process.env.API_KEY && { 'X-API-KEY': process.env.API_KEY }),
        ...(process.env.JWT_TOKEN && { 'Authorization': `Bearer ${process.env.JWT_TOKEN}` })
      }
    });
  }

  /**
   * Clean up API request context
   */
  async dispose(): Promise<void> {
    if (this.context) {
      await this.context.dispose();
      this.context = null;
    }
  }

  /**
   * Build full URL path
   */
  protected buildPath(endpoint: string): string {
    return `${this.basePath}${endpoint}`;
  }

  /**
   * Execute GET request
   */
  protected async get<T>(endpoint: string, options: RequestOptions = {}): Promise<ApiResponse<T>> {
    if (!this.context) {
      throw new Error('API client not initialized. Call init() first.');
    }

    const url = this.buildPath(endpoint);
    
    try {
      const response = await this.context.get(url, {
        headers: options.headers,
        params: options.params,
        timeout: options.timeout || 30000
      });

      const data = await this.parseResponse<T>(response);
      
      return {
        status: response.status(),
        data,
        headers: response.headers(),
        url: response.url()
      };
    } catch (error: any) {
      // Handle HTTP errors
      if (error.response) {
        const errorData = await this.parseResponse(error.response);
        throw {
          status: error.response.status(),
          data: errorData,
          message: error.message,
          response: error.response
        };
      }
      throw error;
    }
  }

  /**
   * Execute POST request
   */
  protected async post<T>(endpoint: string, data: any, options: RequestOptions = {}): Promise<ApiResponse<T>> {
    if (!this.context) {
      throw new Error('API client not initialized. Call init() first.');
    }

    const url = this.buildPath(endpoint);
    
    try {
      const response = await this.context.post(url, {
        data,
        headers: options.headers,
        params: options.params,
        timeout: options.timeout || 30000
      });

      const responseData = await this.parseResponse<T>(response);
      
      return {
        status: response.status(),
        data: responseData,
        headers: response.headers(),
        url: response.url()
      };
    } catch (error: any) {
      // Handle HTTP errors
      if (error.response) {
        const errorData = await this.parseResponse(error.response);
        throw {
          status: error.response.status(),
          data: errorData,
          message: error.message,
          response: error.response
        };
      }
      throw error;
    }
  }

  /**
   * Execute PATCH request
   */
  protected async patch<T>(endpoint: string, data: any, options: RequestOptions = {}): Promise<ApiResponse<T>> {
    if (!this.context) {
      throw new Error('API client not initialized. Call init() first.');
    }

    const url = this.buildPath(endpoint);
    
    try {
      const response = await this.context.patch(url, {
        data,
        headers: options.headers,
        params: options.params,
        timeout: options.timeout || 30000
      });

      const responseData = await this.parseResponse<T>(response);
      
      return {
        status: response.status(),
        data: responseData,
        headers: response.headers(),
        url: response.url()
      };
    } catch (error: any) {
      // Handle HTTP errors
      if (error.response) {
        const errorData = await this.parseResponse(error.response);
        throw {
          status: error.response.status(),
          data: errorData,
          message: error.message,
          response: error.response
        };
      }
      throw error;
    }
  }

  /**
   * Execute DELETE request
   */
  protected async delete<T>(endpoint: string, options: RequestOptions = {}): Promise<ApiResponse<T>> {
    if (!this.context) {
      throw new Error('API client not initialized. Call init() first.');
    }

    const url = this.buildPath(endpoint);
    
    try {
      const response = await this.context.delete(url, {
        headers: options.headers,
        params: options.params,
        timeout: options.timeout || 30000
      });

      const responseData = await this.parseResponse<T>(response);
      
      return {
        status: response.status(),
        data: responseData,
        headers: response.headers(),
        url: response.url()
      };
    } catch (error: any) {
      // Handle HTTP errors
      if (error.response) {
        const errorData = await this.parseResponse(error.response);
        throw {
          status: error.response.status(),
          data: errorData,
          message: error.message,
          response: error.response
        };
      }
      throw error;
    }
  }

  /**
   * Parse response data based on content type
   */
  private async parseResponse<T>(response: any): Promise<T> {
    const contentType = response.headers()['content-type'];
    
    if (contentType && contentType.includes('application/json')) {
      try {
        return await response.json();
      } catch (error) {
        console.warn('Failed to parse JSON response:', error);
        return null as T;
      }
    }
    
    return await response.text() as T;
  }

  /**
   * Log request details for debugging
   */
  protected logRequest(method: string, url: string, data?: any): void {
    if (process.env.LOG_LEVEL === 'debug') {
      console.log(`[API] ${method} ${url}`, data ? JSON.stringify(data, null, 2) : '');
    }
  }

  /**
   * Log response details for debugging
   */
  protected logResponse<T>(response: ApiResponse<T>): void {
    if (process.env.LOG_LEVEL === 'debug') {
      console.log(`[API] Response ${response.status}:`, JSON.stringify(response.data, null, 2));
    }
  }
} 